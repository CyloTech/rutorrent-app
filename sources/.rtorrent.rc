# Appbox ruTorrent 3.8-5 config

scgi_port=127.0.0.1:5000
encoding_list = UTF-8

log.open_file = "rtorrent.log", "/torrents/config/log/rtorrent/rtorrent.log"
log.add_output = "info", "rtorrent.log"
log.add_output = "critical", "rtorrent.log"
log.add_output = "error", "rtorrent.log"
#log.add_output = "warn", "rtorrent.log"
#log.add_output = "notice", "rtorrent.log"
#log.add_output = "info", "rtorrent.log"
#log.add_output = "debug", "rtorrent.log"

# Maximum and minimum number of peers to connect to per torrent.
throttle.min_peers.normal.set = 150
throttle.max_peers.normal.set = 175

# Same as above but for seeding completed torrents (-1 = same as downloading)
throttle.min_peers.seed.set = -1
throttle.max_peers.seed.set = -1

# Maximum number of simultanious uploads per torrent.
throttle.max_downloads.set = 350
throttle.max_uploads.set = 350

# Global upload and download rate in KiB. "0" for unlimited.
#
throttle.global_down.max_rate.set_kb = 0
throttle.global_up.max_rate.set_kb = 0

# Set the numwant field sent to the tracker, which indicates how many peers we want.
#  A negative value disables this feature. Default: `-1` (`tracker_numwant`)
trackers.numwant.set = 100

# Maximum number of connections rtorrent can accept/make (`sockets`)
network.max_open_sockets.set = 1500

# Maximum number of open files rtorrent can keep open (you have to modify the system wide settings with ulimit!) (`set_max_open_files`)
network.max_open_files.set = 800

# Maximum number of simultaneous HTTP request (used by announce or scrape requests) Default: `32` (`set_max_open_http`)
network.http.max_open.set = 100

# Send and receive buffer size for socket. Disabled by default (`0`), this means the default is used by OS
#  (you have to modify the system wide settings!) (`send_buffer_size`, `receive_buffer_size`)
# Increasing buffer sizes may help reduce disk seeking, connection polling as more data is buffered each time
#  the socket is written to. It will result higher memory usage (not visible in rtorrent process!).
network.receive_buffer.size.set = 64M
network.send_buffer.size.set = 64M

# Preloading a piece of a file. Default: `0` Possible values: `0` (Off) , `1` (Madvise) , `2` (Direct paging).
pieces.preload.type.set = 1
pieces.preload.min_size.set = 1
pieces.preload.min_rate.set = 1

#pieces.preload.type.set = 2
#pieces.preload.min_size.set = 262144
#pieces.preload.min_rate.set = 5120

# Set the max amount of memory address space used to mapping file chunks. This refers to memory mapping, not
#  physical memory allocation. Default: `1GB` (`max_memory_usage`)
# This may also be set using ulimit -m where 3/4 will be allocated to file chunks.
pieces.memory.max.set = 5120M

# Default directory to save the downloaded torrents.
directory = /torrents/downloading

# Default session directory. Make sure you don't run multiple instance
# of rtorrent using the same session directory. Perhaps using a
# relative path?
session.path.set = /torrents/config/rtorrent/session

# Close torrents when diskspace is low.
schedule2 = low_diskspace,5,60,close_low_diskspace=1G

# Save all the session in every 12 hours instead of the default 20 minutes.
#schedule2 = session_save, 1200, 43200, ((session.save))

# The ip address reported to the tracker.
#
#network.local_address.set = 127.0.0.1
#network.local_address.set = rakshasa.no

# The ip address the listening socket and outgoing connections is
# bound to.
#
#network.bind_address.set = 127.0.0.1
#network.bind_address.set = rakshasa.no

# Port range to use for listening.
network.port_range.set = LISTENING_PORT-LISTENING_PORT

# Start opening ports at a random position within the port range.
network.port_random.set = yes

# Check hash for finished torrents. Might be usefull until the bug is
# fixed that causes lack of diskspace not to be properly reported.
#
pieces.hash.on_completion.set = no

# Set whether the client should try to connect to UDP trackers.
trackers.use_udp.set = yes

# Alternative calls to bind and ip that should handle dynamic ip's.
#
#schedule2 = ip_tick,0,1800,ip=rakshasa
#schedule2 = bind_tick,0,1800,bind=rakshasa

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
# protocol.encryption.set = allow_incoming,enable_retry,prefer_plaintext

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
# 
dht.mode.set = auto

# UDP port to use for DHT. 
# 
dht.port.set=DHT_PORT

# Disable SSL verification
network.http.ssl_verify_host.set = 0
network.http.ssl_verify_peer.set = 0

# CURL option to lower DNS timeout. Default: `60`.
network.http.dns_cache_timeout.set = 25

# Max packet size using xmlrpc. Default: `524288` (xmlrpc_size_limit)
network.xmlrpc.size_limit.set = 2M

# Enable peer exchange (for torrents not marked private)
#
protocol.pex.set = yes

# Set downlad list layout style. ("full", "compact")
#
#ui.torrent_list.layout.set = "full"

# Whether to allocate disk space for a new torrent. Default: `0`
system.file.allocate.set = 0